import React, { useState, useEffect, useCallback } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import Image from 'next/image';
import { account, databases, databaseId, wishlistsCollectionId, itemsCollectionId, suggestionsCollectionId } from '../../appwriteConfig';
import { Models, ID, Query } from 'appwrite';
import { Trash2, Check, X, GripVertical, Pencil, Grid, List, Save, Copy, Plus, Zap, Edit, Gift } from 'lucide-react';
import { ExternalLink } from 'lucide-react';
import { HoverCard } from '../common/HoverCard';
import { Tooltip } from '../common/Tooltip';
import { Header } from '../layout/Header';
import { GoogleAddressAutocomplete } from '../common/GoogleAddressAutocomplete';
import { UrlPreview } from '../common/UrlPreview';
import { ItemCard } from '../common/ItemCard';
import { useUrlPreview } from '../../hooks/useUrlPreview';
import { DragDropContext, Droppable, Draggable, DropResult } from '@hello-pangea/dnd';
import { useStrictDroppable } from '../../hooks/useStrictDroppable';
import { AddItemManual } from './AddItemManual';

interface WishlistDoc {
  wishlist_name?: string;
  contact_info?: string;
  wishlist_key: string;
  shipping_name?: string;
  shipping_address?: string;
  shipping_city?: string;
  shipping_state?: string;
  shipping_zip?: string;
  shipping_info?: string;
}

interface ItemDoc {
  name: string;
  description?: string;
  store_link?: string;
  cost?: string;
  image_url?: string;
  contributions: number;
  position: number;
}

interface SuggestionDoc {
  name: string;
  description?: string;
  cost?: string;
  store_link?: string;
  image_url?: string;
  requestedBy: string;
}

export const WishlistEditView: React.FC = () => {
  const [showShippingConfirmation, setShowShippingConfirmation] = useState(false);
  const [settingsSaved, setSettingsSaved] = useState(false);
  const { wishlistId } = useParams<{ wishlistId: string }>();
  const [wishlist, setWishlist] = useState<Models.Document & WishlistDoc | null>(null);
  const [items, setItems] = useState<(Models.Document & ItemDoc)[]>([]);
  const [suggestions, setSuggestions] = useState<(Models.Document & SuggestionDoc)[]>([]);
  const [formData, setFormData] = useState({ 
    wishlist_name: '', 
    contact_info: '',
    shipping_name: '',
    shipping_address: '',
    shipping_city: '',
    shipping_state: '',
    shipping_zip: ''
  });
  const [loading, setLoading] = useState(true);
  const [copiedItem, setCopiedItem] = useState<string | null>(null);
  const [editedItemData, setEditedItemData] = useState<ItemDoc | null>(null);
  const [editingItemId, setEditingItemId] = useState<string | null>(null);
  const [viewMode, setViewMode] = useState<'list' | 'grid'>(() => {
    if (typeof window !== 'undefined') {
      return (localStorage.getItem('wishlistViewMode') as 'list' | 'grid') || 'list';
    }
    return 'list';
  });
  const [enabled] = useStrictDroppable(loading);
  const [isClient, setIsClient] = useState(false);
  
  // Add Item Mode - 'manual' or 'auto'
  // Control add item section expansion
  const [isAddItemExpanded, setIsAddItemExpanded] = useState(true);

  // URL Preview functionality for editing items
  const editItemPreview = useUrlPreview();
  const [urlPreviewTimeout, setUrlPreviewTimeout] = useState<NodeJS.Timeout | null>(null);
  
  const navigate = useNavigate();

  // Ensure client-side rendering for drag-and-drop
  useEffect(() => {
    setIsClient(true);
  }, []);

  // Fetch wishlist data
  const fetchWishlistData = useCallback(async (id: string) => {
    try {
      const wishlistDoc = await databases.getDocument(databaseId, wishlistsCollectionId, id);
      setWishlist(wishlistDoc as unknown as Models.Document & WishlistDoc);
      setFormData({
        wishlist_name: wishlistDoc.wishlist_name || '',
        contact_info: wishlistDoc.contact_info || '',
        shipping_name: wishlistDoc.shipping_name || '',
        shipping_address: wishlistDoc.shipping_address || '',
        shipping_city: wishlistDoc.shipping_city || '',
        shipping_state: wishlistDoc.shipping_state || '',
        shipping_zip: wishlistDoc.shipping_zip || ''
      });

      const itemsResponse = await databases.listDocuments(
        databaseId,
        itemsCollectionId,
        [
          Query.equal('wishlist_id', id),
          Query.orderAsc('position')
        ]
      );
      setItems(itemsResponse.documents as unknown as (Models.Document & ItemDoc)[]);

      const suggestionsResponse = await databases.listDocuments(databaseId, suggestionsCollectionId, [Query.equal('wishlist_id', id)]);
      setSuggestions(suggestionsResponse.documents as unknown as (Models.Document & SuggestionDoc)[]);

      sessionStorage.setItem('lastVisitedWishlist', wishlistDoc.wishlist_key);
    } catch (error) {
      navigate('/dashboard');
    }
  }, [navigate]);

  useEffect(() => {
    if (!wishlistId) {
      navigate('/dashboard');
      return;
    }
    const checkUser = async () => {
      try {
        await account.get();
        await fetchWishlistData(wishlistId);
      } catch (error) {
        navigate('/login');
      } finally {
        setLoading(false);
      }
    };
    checkUser();
  }, [wishlistId, navigate, fetchWishlistData]);

  // Handlers for items
  const handleItemAdded = (newItem: Models.Document & ItemDoc) => {
    setItems(prev => [...prev, newItem]);
  };

  const handleEditItem = (item: Models.Document & ItemDoc) => {
    setEditingItemId(item.$id);
    setEditedItemData(item);
    editItemPreview.clearPreview();
    if (item.store_link && item.store_link.trim().startsWith('http')) {
      setTimeout(() => {
        editItemPreview.previewUrl(item.store_link!);
      }, 100);
    }
  };

  const handleDeleteItem = async (itemId: string) => {
    try {
      await databases.deleteDocument(databaseId, itemsCollectionId, itemId);
      setItems(prev => prev.filter(item => item.$id !== itemId));
    } catch (error) {
      console.error('Error deleting item:', error);
    }
  };

  const handleDuplicateItem = async (item: Models.Document & ItemDoc) => {
    if (!wishlist) return;
    try {
      const duplicatedItemDoc = await databases.createDocument(databaseId, itemsCollectionId, ID.unique(), {
        wishlist_id: wishlist.$id,
        name: `${item.name} (copy)`,
        description: item.description,
        store_link: item.store_link,
        cost: item.cost,
        image_url: item.image_url || '',
        contributions: 0,
        position: items.length
      });
      setItems(prev => [...prev, duplicatedItemDoc as unknown as Models.Document & ItemDoc]);
    } catch (error) {
      console.error('Error duplicating item:', error);
    }
  };

  // Settings handlers
  const handleSettingsSave = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!wishlist) return;
    try {
      await databases.updateDocument(databaseId, wishlistsCollectionId, wishlist.$id, {
        wishlist_name: formData.wishlist_name,
        contact_info: formData.contact_info
      });
      setWishlist(prev => prev ? { ...prev, wishlist_name: formData.wishlist_name, contact_info: formData.contact_info } : null);
      setSettingsSaved(true);
      setTimeout(() => setSettingsSaved(false), 3500);
    } catch (error) {
      console.error('Failed to save settings:', error);
    }
  };

  const handleCopy = (textToCopy: string, type: 'key' | 'link') => {
    navigator.clipboard.writeText(textToCopy);
    setCopiedItem(type);
    setTimeout(() => setCopiedItem(null), 2000);
  };

  const onDragEnd = (result: DropResult) => {
    const { destination, source } = result;
    if (!destination) return;
    if (destination.droppableId === source.droppableId && destination.index === source.index) return;

    const reorderedItems = Array.from(items);
    const [removed] = reorderedItems.splice(source.index, 1);
    reorderedItems.splice(destination.index, 0, removed);

    (async () => {
      for (let idx = 0; idx < reorderedItems.length; idx++) {
        const item = reorderedItems[idx];
        try {
          await databases.updateDocument(databaseId, itemsCollectionId, item.$id, {
            position: idx
          });
        } catch (error) {
          console.error('Error updating item position:', error);
        }
      }
    })();

    setItems(reorderedItems);
  };

  return (
    <div className="min-h-screen bg-neutral-100 dark:bg-neutral-900 text-gray-800 dark:text-gray-200">
      <Header title="Manage wiSHlist" showBackButton={true} showInfoButton={true} isLoading={loading} />
      <main className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8 grid grid-cols-1 md:grid-cols-3 gap-8">
        <div className="md:col-span-2 space-y-8">
          {/* Merged Add New Item (Auto/Manual) section with bg-neutral and no border */}
          <div className="flex flex-col">
            <div className="bg-white dark:bg-neutral-800 rounded-lg shadow hover:bg-gray-50 dark:hover:bg-neutral-700 transition-colors cursor-pointer">
              <div 
                className="px-4 py-2.5 flex items-center min-h-[48px]"
                onClick={() => setIsAddItemExpanded(prev => !prev)}
              >
                <h3 className="text-lg font-semibold text-sky-600 dark:text-sky-600">
                  Add New Item
                </h3>
              </div>
              {wishlist && (
                <div className="px-4 pb-4">
                  <div className={`transition-all duration-300 ease-in-out overflow-hidden ${isAddItemExpanded ? 'max-h-[1000px] opacity-100' : 'max-h-0 opacity-0'}`}>
                    <AddItemManual wishlist={wishlist} onItemAdded={handleItemAdded} />
                  </div>
                </div>
              )}
            </div>
          </div>

          {/* Items List Section */}
          <div>
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-xl font-bold text-gray-800 dark:text-gray-200">Your Items ({items.length})</h3>
              <div className="flex items-center space-x-2">
                <Tooltip text="List View">
                  <button
                    onClick={() => setViewMode('list')}
                    className={`p-2 rounded-md transition-colors ${
                      viewMode === 'list'
                        ? 'bg-sky-600 text-white hover:bg-sky-800'
                        : 'bg-gray-200 dark:bg-neutral-700 text-gray-600 dark:text-gray-300 hover:bg-gray-400 dark:hover:bg-neutral-500'
                    }`}
                    aria-label="List View"
                  >
                    <List className="w-5 h-5" />
                  </button>
                </Tooltip>
                <Tooltip text="Grid View">
                  <button
                    onClick={() => setViewMode('grid')}
                    className={`p-2 rounded-md transition-colors ${
                      viewMode === 'grid'
                        ? 'bg-sky-600 text-white hover:bg-sky-800'
                        : 'bg-gray-200 dark:bg-neutral-700 text-gray-600 dark:text-gray-300 hover:bg-gray-400 dark:hover:bg-neutral-500'
                    }`}
                    aria-label="Grid View"
                  >
                    <Grid className="w-5 h-5" />
                  </button>
                </Tooltip>
              </div>
            </div>

            {/* Items Grid/List */}
            <DragDropContext onDragEnd={onDragEnd}>
              {enabled && isClient && (
                <Droppable droppableId="wishlist-items">
                  {(provided) => (
                    <div {...provided.droppableProps} ref={provided.innerRef} className={`grid gap-6 ${viewMode === 'grid' ? 'grid-cols-1 md:grid-cols-2' : 'grid-cols-1'}`}>
                      {items.map((item, index) => (
                        <Draggable key={item.$id} draggableId={item.$id} index={index}>
                          {(provided) => (
                            <div
                              ref={provided.innerRef}
                              {...provided.draggableProps}
                              {...provided.dragHandleProps}
                              className="bg-white dark:bg-neutral-800 rounded-lg shadow p-4"
                            >
                              <ItemCard
                                item={item}
                                viewMode={viewMode}
                                onEdit={() => handleEditItem(item)}
                                onDelete={() => handleDeleteItem(item.$id)}
                                onDuplicate={() => handleDuplicateItem(item)}
                              />
                            </div>
                          )}
                        </Draggable>
                      ))}
                      {provided.placeholder}
                    </div>
                  )}
                </Droppable>
              )}
            </DragDropContext>
          </div>
        </div>

        {/* Settings Column */}
        <div className="md:col-span-1">
          <div className="bg-white dark:bg-neutral-800 rounded-lg shadow p-6">
            <h3 className="text-lg font-semibold text-gray-800 dark:text-gray-200 mb-4">wiSHlist Settings</h3>
            <form onSubmit={handleSettingsSave} className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">wiSHlist Name</label>
                <input
                  type="text"
                  value={formData.wishlist_name}
                  onChange={e => setFormData({...formData, wishlist_name: e.target.value})}
                  className="mt-1 w-full p-2 rounded bg-neutral-200 dark:bg-neutral-700 text-gray-900 dark:text-gray-200 focus:outline-none"
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">Contact Info</label>
                <input
                  type="text"
                  value={formData.contact_info}
                  onChange={e => setFormData({...formData, contact_info: e.target.value})}
                  className="mt-1 w-full p-2 rounded bg-neutral-200 dark:bg-neutral-700 text-gray-900 dark:text-gray-200 focus:outline-none"
                />
              </div>

              {/* Shipping Address Section */}
              <div>
                <h4 className="text-sm font-semibold text-gray-700 dark:text-gray-300 mb-3">Shipping Info</h4>
                <div className="space-y-3">
                  <GoogleAddressAutocomplete
                    placeholder="Type school name or address..."
                    preferSchools={true}
                    onAddressSelect={(address: {
                      name: string;
                      address: string;
                      city?: string;
                      state?: string;
                      zip?: string;
                    }) => {
                      setFormData({
                        ...formData,
                        shipping_name: address.name || address.address || '',
                        shipping_address: address.address || '',
                        shipping_city: address.city || '',
                        shipping_state: address.state || '',
                        shipping_zip: address.zip || ''
                      });

                      // Update shipping info in the wishlist
                      const cityState = address.city && address.state ? `${address.city}, ${address.state}` : `${address.city || ''}${address.state ? address.state : ''}`;
                      const shippingInfo = `${address.name || ''}\n${address.address || ''}\n${cityState}\n${address.zip || ''}`;
                      if (wishlist) {
                        databases.updateDocument(databaseId, wishlistsCollectionId, wishlist.$id, {
                          shipping_info: shippingInfo
                        });
                        setWishlist(prev => prev ? { ...prev, shipping_info: shippingInfo } : null);
                      }
                    }}
                    className="mt-1"
                  />
                  <input
                    type="text"
                    value={formData.shipping_name}
                    placeholder="School or organization name"
                    onChange={e => setFormData({ ...formData, shipping_name: e.target.value })}
                    className="w-full p-2 rounded bg-neutral-200 dark:bg-neutral-700 text-gray-900 dark:text-gray-200 focus:outline-none"
                  />
                </div>
              </div>

              <div>
                <button
                  type="submit"
                  className={`mt-1 w-full py-2 px-4 rounded-lg flex items-center justify-center transition-colors
                    ${settingsSaved ? 'bg-green-600 text-white' : 'bg-sky-600 text-white hover:bg-sky-800 dark:hover:bg-sky-800'}`}
                  disabled={settingsSaved}
                >
                  {settingsSaved ? (
                    <span className="flex items-center">
                      <Check className="w-5 h-5 mr-2" />
                      Saved Successfully
                    </span>
                  ) : (
                    <>
                      <Save className="w-4 h-4 mr-2" />
                      Save Settings
                    </>
                  )}
                </button>
              </div>
            </form>

            {/* Share Section */}
            <div className="mt-6 space-y-4">
              <div>
                <h4 className="text-sm font-medium text-gray-700 dark:text-gray-300">Share Key</h4>
                <div className="mt-1 flex items-center space-x-2">
                  <input
                    type="text"
                    readOnly
                    value={wishlist?.wishlist_key || ''}
                    className="w-full text-sm bg-gray-100 dark:bg-neutral-700 p-1 rounded text-gray-900 dark:text-gray-200 focus:outline-none"
                  />
                  <Tooltip text="Copy share key">
                    <button
                      onClick={() => handleCopy(wishlist?.wishlist_key || '', 'key')}
                      className={`px-3 py-1 text-sm rounded transition-colors ${copiedItem === 'key' ? 'bg-green-600 text-white' : 'bg-sky-600 text-white hover:bg-sky-800'}`}
                    >
                      {copiedItem === 'key' ? <Check className="w-4 h-4" /> : 'Copy'}
                    </button>
                  </Tooltip>
                </div>
              </div>

              <div>
                <h4 className="text-sm font-medium text-gray-700 dark:text-gray-300">Share Link</h4>
                <div className="mt-1 flex items-center space-x-2">
                  <input
                    type="text"
                    readOnly
                    value={`${window.location.origin}/wishlist/${wishlist?.wishlist_key}`}
                    className="w-full text-sm bg-gray-100 dark:bg-neutral-700 p-1 rounded text-gray-900 dark:text-gray-200 focus:outline-none"
                  />
                  <Tooltip text="Copy share link">
                    <button
                      onClick={() => handleCopy(`${window.location.origin}/wishlist/${wishlist?.wishlist_key}`, 'link')}
                      className={`px-3 py-1 text-sm rounded transition-colors ${copiedItem === 'link' ? 'bg-green-600 text-white' : 'bg-sky-600 text-white hover:bg-sky-800'}`}
                    >
                      {copiedItem === 'link' ? <Check className="w-4 h-4" /> : 'Copy'}
                    </button>
                  </Tooltip>
                </div>
              </div>
            </div>
          </div>
        </div>
      </main>
    </div>
  );
};
